syntax = "proto3"; // 告诉编译器使用proto3语法

package person;

//option go_package = "包路径(从mod下开始写);别名";

option  go_package = "admin_go/grpc_class/new_pb/person;person";

message PersonReq {
  // 先声明类型，再声明字段名 类型+字段名
  string name = 1;
  int32 age = 2;
}

message PersonRes {
  // 先声明类型，再声明字段名 类型+字段名
  string name = 1;
  int32 age = 2;
}
/*
嵌套类型
message Home {
  repeated Person person = 1;
  message V {
    string  name = 1;
  }
}*/

/*
  切片的关键字 repeated
*/

/*
  map的关键字 map
*/

/*
  reserved 保留字段
*/

/*
  enum 枚举
*/


/*
  oneOf 互斥字段
*/

service SearchService {
  rpc Search (PersonReq) returns (PersonRes); // traditional, 传统的 rpc;即刻响应的rpc
  rpc SearchIn (stream PersonReq) returns (PersonRes); // stream, 流式的rpc;即刻响应的rpc // 传入的是流，返回的是单个
  rpc SearchOut (PersonReq) returns (stream PersonRes); // stream, 流式的rpc;即刻响应的rpc // 传入的是单个，返回的是流
  rpc SearchInOut (stream PersonReq) returns (stream PersonRes); // stream, 流式的rpc;即刻响应的rpc // 传入的是流，返回的是流
}

